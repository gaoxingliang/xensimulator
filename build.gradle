///////////////////////////////////////////////////////////////////////////////////////
//
//                 Gradle Template Summary
//
//   Frequently Used Command:
//      [ gradle ]          Default task. same with 'gradle build'.
//      [ gradle build ]    Compile/test your code, and create a war file containing your main classes and resources.
//
////////////////////////////////////////////////////////////////////////////////////////

//Definition apply plugin
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'

//--------------------------------- Based setting  for current project ---------------------------------

// Definition sourceCompatibility and targetCompatibility.
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

buildscript {
    ext {
        MODULE                      = "xen-simulator"
        MAVEN_GROUP_ID              = "com.logicmonitor"
        MAVEN_ARTIFACT_ID           = "xen-simulator"
        MAVEN_VERSION               = "0.0.6"
    }

    repositories {
        maven {
            credentials {
                username MAVEN_REPO_USERNAME
                password MAVEN_REPO_PASSWORD
            }
            url REPOSITORRY_URL
        }
    }

    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

// Access maven center.
repositories {
    maven {
        credentials {
            username MAVEN_REPO_USERNAME
            password MAVEN_REPO_PASSWORD
        }
        url REPOSITORRY_URL
    }
}


// Definition source which should include.
sourceSets {
    main {
        java {
            srcDir 'java/main/'
        }
        resources {
            srcDir 'resources/'
        }
    }

    test {
        java {
            srcDir 'java/test/'
        }
    }
}


//--------------------------------- Dependencies definition ---------------------------------

dependencies {
    compile "commons-io:commons-io:2.2"
    compile "commons-lang:commons-lang:2.6"
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc', version: '3.1.3'
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-common', version: '3.1.3'

    compile(group: "org.apache.xmlrpc", name: "xmlrpc-common", version:"3.1.3") {
        exclude group:"org.junit"
    }
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-client', version: '3.1.3'
    compile group: 'org.apache.xmlrpc', name: 'xmlrpc-server', version: '3.1.3'
    compile group: 'commons-httpclient', name: 'commons-httpclient', version: '3.1'
    compile "com.logicmonitor:xenserver:5.5.0-1"
    compile "org.apache.logging.log4j:log4j-api:2.5"
    compile "org.apache.logging.log4j:log4j-core:2.5"

    // Include non maven standard layout file into war
    testCompile(
            "junit:junit:4.10",
    )
}

// Define manifest
ext.sharedManifest = manifest {
    attributes(
            'Modlue': "${MODULE}",
            'Implementation-Title': "${project.name}",
            'Built-Date': new Date().getDateTimeString(),
            'Built-With': "gradle-${project.getGradle().getGradleVersion()}, groovy-${GroovySystem.getVersion()}",
            'Created-By': 'Java ' + System.getProperty('java.version') + ' (' + System.getProperty('java.vendor') + ')'
    )
}


//--------------------------------- Specific Tasks ---------------------------------
/*
*  Override jar task addition attributes
*/
jar {
    manifest = project.manifest {
        from sharedManifest
    }
    baseName = "xen-simulator-" + MAVEN_VERSION


}


/**
 * fatjar demo
 */
task fatjar(type: Jar) {

    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': MAVEN_VERSION
    }
    baseName = "xen-simulator-" + MAVEN_VERSION
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}


/* Define condition for Upload Archives action, do not execute when the provided information is incomplete.
*  Usage: gradle uploadArchives
*/
uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = MAVEN_GROUP_ID
            pom.artifactId = MAVEN_ARTIFACT_ID
            pom.version = MAVEN_VERSION

            def SUFFIX = pom.version.contains("SNAPSHOT") ? "snapshots" : "Logicmonitor"
            repository(url: UPLOAD_ARCHIVES_URL + SUFFIX) {
                authentication(userName: MAVEN_REPO_USERNAME, password: MAVEN_REPO_PASSWORD)
            }
        }
    }
}



defaultTasks 'clean','test','jar'

task build (overwrite: true ) {
    dependsOn = ['clean','test','jar']

    test.mustRunAfter clean
    jar.mustRunAfter test
}

task devbuild {
    dependsOn = ['clean','jar']

    jar.mustRunAfter clean
}

//Define the test task
test {
    ignoreFailures = true
    reports.html.destination = file("$buildDir/test-reports")
}


task createJavaProject << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs()}
}

